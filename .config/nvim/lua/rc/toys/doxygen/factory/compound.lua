--
-- GENERATED BY factory_generator.lua
--
local factory = {}
--- @param builder eeeBuilder
--- @return string
function factory.string(builder)
  return builder:from_text()
end

--------------------------------
-- Complex Types
--------------------------------
--- @param builder eeeBuilder
--- @return doxygen.compound.DoxygenType
function factory.DoxygenType(builder)
  return { --- @type doxygen.compound.DoxygenType
    ["compounddef"] = builder:from_element("compounddef", "optional", factory.compounddefType),
    ["version"] = builder:from_attr("version", "required", "string"),
    ["xml_lang"] = builder:from_attr("xml:lang", "required", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.compounddefType
function factory.compounddefType(builder)
  return { --- @type doxygen.compound.compounddefType
    ["compoundname"] = builder:from_element("compoundname", "required", factory.string),
    ["title"] = builder:from_element("title", "optional", factory.string),
    ["basecompoundref"] = builder:from_element("basecompoundref", "array", factory.compoundRefType),
    ["derivedcompoundref"] = builder:from_element("derivedcompoundref", "array", factory.compoundRefType),
    ["includes"] = builder:from_element("includes", "array", factory.incType),
    ["includedby"] = builder:from_element("includedby", "array", factory.incType),
    ["incdepgraph"] = builder:from_element("incdepgraph", "optional", factory.graphType),
    ["invincdepgraph"] = builder:from_element("invincdepgraph", "optional", factory.graphType),
    ["innermodule"] = builder:from_element("innermodule", "array", factory.refType),
    ["innerdir"] = builder:from_element("innerdir", "array", factory.refType),
    ["innerfile"] = builder:from_element("innerfile", "array", factory.refType),
    ["innerclass"] = builder:from_element("innerclass", "array", factory.refType),
    ["innerconcept"] = builder:from_element("innerconcept", "array", factory.refType),
    ["innernamespace"] = builder:from_element("innernamespace", "array", factory.refType),
    ["innerpage"] = builder:from_element("innerpage", "array", factory.refType),
    ["innergroup"] = builder:from_element("innergroup", "array", factory.refType),
    ["qualifier"] = builder:from_text_only_element("qualifier", "array"),
    ["templateparamlist"] = builder:from_element("templateparamlist", "optional", factory.templateparamlistType),
    ["sectiondef"] = builder:from_element("sectiondef", "array", factory.sectiondefType),
    ["tableofcontents"] = builder:from_element("tableofcontents", "optional", factory.tableofcontentsType),
    ["requiresclause"] = builder:from_element("requiresclause", "optional", factory.linkedTextType),
    ["initializer"] = builder:from_element("initializer", "optional", factory.linkedTextType),
    ["briefdescription"] = builder:from_element("briefdescription", "optional", factory.descriptionType),
    ["detaileddescription"] = builder:from_element("detaileddescription", "optional", factory.descriptionType),
    ["exports"] = builder:from_element("exports", "optional", factory.exportsType),
    ["inheritancegraph"] = builder:from_element("inheritancegraph", "optional", factory.graphType),
    ["collaborationgraph"] = builder:from_element("collaborationgraph", "optional", factory.graphType),
    ["programlisting"] = builder:from_element("programlisting", "optional", factory.listingType),
    ["location"] = builder:from_element("location", "optional", factory.locationType),
    ["listofallmembers"] = builder:from_element("listofallmembers", "optional", factory.listofallmembersType),
    ["id"] = builder:from_attr("id", "optional", "string"),
    ["kind"] = builder:from_attr("kind", "optional", "string"),
    ["language"] = builder:from_attr("language", "optional", "string"),
    ["prot"] = builder:from_attr("prot", "optional", "string"),
    ["final"] = builder:from_attr("final", "optional", "boolean"),
    ["inline"] = builder:from_attr("inline", "optional", "boolean"),
    ["sealed"] = builder:from_attr("sealed", "optional", "boolean"),
    ["abstract"] = builder:from_attr("abstract", "optional", "boolean"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.listofallmembersType
function factory.listofallmembersType(builder)
  return { --- @type doxygen.compound.listofallmembersType
    ["member"] = builder:from_element("member", "array", factory.memberRefType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.memberRefType
function factory.memberRefType(builder)
  return { --- @type doxygen.compound.memberRefType
    ["scope"] = builder:from_text_only_element("scope", "required"),
    ["name"] = builder:from_text_only_element("name", "required"),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["prot"] = builder:from_attr("prot", "optional", "string"),
    ["virt"] = builder:from_attr("virt", "optional", "string"),
    ["ambiguityscope"] = builder:from_attr("ambiguityscope", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docHtmlOnlyType
function factory.docHtmlOnlyType(builder)
  return { --- @type doxygen.compound.docHtmlOnlyType
    ["text"] = builder:from_text(),
    ["block"] = builder:from_attr("block", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.compoundRefType
function factory.compoundRefType(builder)
  return { --- @type doxygen.compound.compoundRefType
    ["text"] = builder:from_text(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["prot"] = builder:from_attr("prot", "optional", "string"),
    ["virt"] = builder:from_attr("virt", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.reimplementType
function factory.reimplementType(builder)
  return { --- @type doxygen.compound.reimplementType
    ["text"] = builder:from_text(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.incType
function factory.incType(builder)
  return { --- @type doxygen.compound.incType
    ["text"] = builder:from_text(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["local"] = builder:from_attr("local", "optional", "boolean"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.exportsType
function factory.exportsType(builder)
  return { --- @type doxygen.compound.exportsType
    ["export"] = builder:from_element("export", "array", factory.exportType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.exportType
function factory.exportType(builder)
  return { --- @type doxygen.compound.exportType
    ["text"] = builder:from_text(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.refType
function factory.refType(builder)
  return { --- @type doxygen.compound.refType
    ["text"] = builder:from_text(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["prot"] = builder:from_attr("prot", "optional", "string"),
    ["inline"] = builder:from_attr("inline", "optional", "boolean"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.refTextType
function factory.refTextType(builder)
  return { --- @type doxygen.compound.refTextType
    ["text"] = builder:from_text(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["kindref"] = builder:from_attr("kindref", "optional", "string"),
    ["external"] = builder:from_attr("external", "optional", "string"),
    ["tooltip"] = builder:from_attr("tooltip", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.MemberType
function factory.MemberType(builder)
  return { --- @type doxygen.compound.MemberType
    ["name"] = builder:from_element("name", "required", factory.string),
    ["refid"] = builder:from_attr("refid", "required", "string"),
    ["kind"] = builder:from_attr("kind", "required", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.sectiondefType
function factory.sectiondefType(builder)
  return { --- @type doxygen.compound.sectiondefType
    ["header"] = builder:from_element("header", "optional", factory.string),
    ["description"] = builder:from_element("description", "optional", factory.descriptionType),
    ["memberdef"] = builder:from_element("memberdef", "array", factory.memberdefType),
    ["member"] = builder:from_element("member", "array", factory.MemberType),
    ["kind"] = builder:from_attr("kind", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.memberdefType
function factory.memberdefType(builder)
  return { --- @type doxygen.compound.memberdefType
    ["templateparamlist"] = builder:from_element("templateparamlist", "optional", factory.templateparamlistType),
    ["type"] = builder:from_element("type", "optional", factory.linkedTextType),
    ["definition"] = builder:from_text_only_element("definition", "optional"),
    ["argsstring"] = builder:from_text_only_element("argsstring", "optional"),
    ["name"] = builder:from_text_only_element("name", "required"),
    ["qualifiedname"] = builder:from_text_only_element("qualifiedname", "optional"),
    ["read"] = builder:from_text_only_element("read", "optional"),
    ["write"] = builder:from_text_only_element("write", "optional"),
    ["bitfield"] = builder:from_text_only_element("bitfield", "optional"),
    ["reimplements"] = builder:from_element("reimplements", "array", factory.reimplementType),
    ["reimplementedby"] = builder:from_element("reimplementedby", "array", factory.reimplementType),
    ["qualifier"] = builder:from_text_only_element("qualifier", "array"),
    ["param"] = builder:from_element("param", "array", factory.paramType),
    ["enumvalue"] = builder:from_element("enumvalue", "array", factory.enumvalueType),
    ["requiresclause"] = builder:from_element("requiresclause", "optional", factory.linkedTextType),
    ["initializer"] = builder:from_element("initializer", "optional", factory.linkedTextType),
    ["exceptions"] = builder:from_element("exceptions", "optional", factory.linkedTextType),
    ["briefdescription"] = builder:from_element("briefdescription", "optional", factory.descriptionType),
    ["detaileddescription"] = builder:from_element("detaileddescription", "optional", factory.descriptionType),
    ["inbodydescription"] = builder:from_element("inbodydescription", "optional", factory.descriptionType),
    ["location"] = builder:from_element("location", "required", factory.locationType),
    ["references"] = builder:from_element("references", "array", factory.referenceType),
    ["referencedby"] = builder:from_element("referencedby", "array", factory.referenceType),
    ["kind"] = builder:from_attr("kind", "optional", "string"),
    ["id"] = builder:from_attr("id", "optional", "string"),
    ["prot"] = builder:from_attr("prot", "optional", "string"),
    ["static"] = builder:from_attr("static", "optional", "boolean"),
    ["extern"] = builder:from_attr("extern", "optional", "boolean"),
    ["strong"] = builder:from_attr("strong", "optional", "boolean"),
    ["const"] = builder:from_attr("const", "optional", "boolean"),
    ["explicit"] = builder:from_attr("explicit", "optional", "boolean"),
    ["inline"] = builder:from_attr("inline", "optional", "boolean"),
    ["refqual"] = builder:from_attr("refqual", "optional", "string"),
    ["virt"] = builder:from_attr("virt", "optional", "string"),
    ["volatile"] = builder:from_attr("volatile", "optional", "boolean"),
    ["mutable"] = builder:from_attr("mutable", "optional", "boolean"),
    ["noexcept"] = builder:from_attr("noexcept", "optional", "boolean"),
    ["noexceptexpression"] = builder:from_attr("noexceptexpression", "optional", "string"),
    ["nodiscard"] = builder:from_attr("nodiscard", "optional", "boolean"),
    ["constexpr"] = builder:from_attr("constexpr", "optional", "boolean"),
    ["consteval"] = builder:from_attr("consteval", "optional", "boolean"),
    ["constinit"] = builder:from_attr("constinit", "optional", "boolean"),
    ["readable"] = builder:from_attr("readable", "optional", "boolean"),
    ["writable"] = builder:from_attr("writable", "optional", "boolean"),
    ["initonly"] = builder:from_attr("initonly", "optional", "boolean"),
    ["settable"] = builder:from_attr("settable", "optional", "boolean"),
    ["privatesettable"] = builder:from_attr("privatesettable", "optional", "boolean"),
    ["protectedsettable"] = builder:from_attr("protectedsettable", "optional", "boolean"),
    ["gettable"] = builder:from_attr("gettable", "optional", "boolean"),
    ["privategettable"] = builder:from_attr("privategettable", "optional", "boolean"),
    ["protectedgettable"] = builder:from_attr("protectedgettable", "optional", "boolean"),
    ["final"] = builder:from_attr("final", "optional", "boolean"),
    ["sealed"] = builder:from_attr("sealed", "optional", "boolean"),
    ["new"] = builder:from_attr("new", "optional", "boolean"),
    ["add"] = builder:from_attr("add", "optional", "boolean"),
    ["remove"] = builder:from_attr("remove", "optional", "boolean"),
    ["raise"] = builder:from_attr("raise", "optional", "boolean"),
    ["optional"] = builder:from_attr("optional", "optional", "boolean"),
    ["required"] = builder:from_attr("required", "optional", "boolean"),
    ["accessor"] = builder:from_attr("accessor", "optional", "string"),
    ["attribute"] = builder:from_attr("attribute", "optional", "boolean"),
    ["property"] = builder:from_attr("property", "optional", "boolean"),
    ["readonly"] = builder:from_attr("readonly", "optional", "boolean"),
    ["bound"] = builder:from_attr("bound", "optional", "boolean"),
    ["removable"] = builder:from_attr("removable", "optional", "boolean"),
    ["constrained"] = builder:from_attr("constrained", "optional", "boolean"),
    ["transient"] = builder:from_attr("transient", "optional", "boolean"),
    ["maybevoid"] = builder:from_attr("maybevoid", "optional", "boolean"),
    ["maybedefault"] = builder:from_attr("maybedefault", "optional", "boolean"),
    ["maybeambiguous"] = builder:from_attr("maybeambiguous", "optional", "boolean"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.descriptionType
function factory.descriptionType(builder)
  return { --- @type doxygen.compound.descriptionType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.enumvalueType
function factory.enumvalueType(builder)
  return { --- @type doxygen.compound.enumvalueType
    ["name"] = builder:from_text_only_element("name", "required"),
    ["initializer"] = builder:from_element("initializer", "optional", factory.linkedTextType),
    ["briefdescription"] = builder:from_element("briefdescription", "optional", factory.descriptionType),
    ["detaileddescription"] = builder:from_element("detaileddescription", "optional", factory.descriptionType),
    ["id"] = builder:from_attr("id", "optional", "string"),
    ["prot"] = builder:from_attr("prot", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.templateparamlistType
function factory.templateparamlistType(builder)
  return { --- @type doxygen.compound.templateparamlistType
    ["param"] = builder:from_element("param", "array", factory.paramType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.paramType
function factory.paramType(builder)
  return { --- @type doxygen.compound.paramType
    ["attributes"] = builder:from_text_only_element("attributes", "optional"),
    ["type"] = builder:from_element("type", "optional", factory.linkedTextType),
    ["declname"] = builder:from_text_only_element("declname", "optional"),
    ["defname"] = builder:from_text_only_element("defname", "optional"),
    ["array"] = builder:from_text_only_element("array", "optional"),
    ["defval"] = builder:from_element("defval", "optional", factory.linkedTextType),
    ["typeconstraint"] = builder:from_element("typeconstraint", "optional", factory.linkedTextType),
    ["briefdescription"] = builder:from_element("briefdescription", "optional", factory.descriptionType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.linkedTextType
function factory.linkedTextType(builder)
  return { --- @type doxygen.compound.linkedTextType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.graphType
function factory.graphType(builder)
  return { --- @type doxygen.compound.graphType
    ["node"] = builder:from_element("node", "array", factory.nodeType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.nodeType
function factory.nodeType(builder)
  return { --- @type doxygen.compound.nodeType
    ["label"] = builder:from_text_only_element("label", "required"),
    ["link"] = builder:from_element("link", "optional", factory.linkType),
    ["childnode"] = builder:from_element("childnode", "array", factory.childnodeType),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.childnodeType
function factory.childnodeType(builder)
  return { --- @type doxygen.compound.childnodeType
    ["edgelabel"] = builder:from_text_only_element("edgelabel", "array"),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["relation"] = builder:from_attr("relation", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.linkType
function factory.linkType(builder)
  return { --- @type doxygen.compound.linkType
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["external"] = builder:from_attr("external", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.listingType
function factory.listingType(builder)
  return builder:from_folded_text_content()
end

--- @param builder eeeBuilder
--- @return doxygen.compound.codelineType
function factory.codelineType(builder)
  return { --- @type doxygen.compound.codelineType
    ["highlight"] = builder:from_element("highlight", "array", factory.highlightType),
    ["lineno"] = builder:from_attr("lineno", "optional", "number"),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["refkind"] = builder:from_attr("refkind", "optional", "string"),
    ["external"] = builder:from_attr("external", "optional", "boolean"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.highlightType
function factory.highlightType(builder)
  return { --- @type doxygen.compound.highlightType
    content = builder:from_element_mixed(),
    ["class"] = builder:from_attr("class", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.spType
function factory.spType(builder)
  return { --- @type doxygen.compound.spType
    content = builder:from_element_mixed(),
    ["value"] = builder:from_attr("value", "optional", "number"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.referenceType
function factory.referenceType(builder)
  return { --- @type doxygen.compound.referenceType
    content = builder:from_element_mixed(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["compoundref"] = builder:from_attr("compoundref", "optional", "string"),
    ["startline"] = builder:from_attr("startline", "optional", "number"),
    ["endline"] = builder:from_attr("endline", "optional", "number"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.locationType
function factory.locationType(builder)
  return { --- @type doxygen.compound.locationType
    ["file"] = builder:from_attr("file", "optional", "string"),
    ["line"] = builder:from_attr("line", "optional", "number"),
    ["column"] = builder:from_attr("column", "optional", "number"),
    ["declfile"] = builder:from_attr("declfile", "optional", "string"),
    ["declline"] = builder:from_attr("declline", "optional", "number"),
    ["declcolumn"] = builder:from_attr("declcolumn", "optional", "number"),
    ["bodyfile"] = builder:from_attr("bodyfile", "optional", "string"),
    ["bodystart"] = builder:from_attr("bodystart", "optional", "number"),
    ["bodyend"] = builder:from_attr("bodyend", "optional", "number"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSect1Type
function factory.docSect1Type(builder)
  return { --- @type doxygen.compound.docSect1Type
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSect2Type
function factory.docSect2Type(builder)
  return { --- @type doxygen.compound.docSect2Type
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSect3Type
function factory.docSect3Type(builder)
  return { --- @type doxygen.compound.docSect3Type
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSect4Type
function factory.docSect4Type(builder)
  return { --- @type doxygen.compound.docSect4Type
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSect5Type
function factory.docSect5Type(builder)
  return { --- @type doxygen.compound.docSect5Type
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSect6Type
function factory.docSect6Type(builder)
  return { --- @type doxygen.compound.docSect6Type
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docInternalType
function factory.docInternalType(builder)
  return { --- @type doxygen.compound.docInternalType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docInternalS1Type
function factory.docInternalS1Type(builder)
  return { --- @type doxygen.compound.docInternalS1Type
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docInternalS2Type
function factory.docInternalS2Type(builder)
  return { --- @type doxygen.compound.docInternalS2Type
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docInternalS3Type
function factory.docInternalS3Type(builder)
  return { --- @type doxygen.compound.docInternalS3Type
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docInternalS4Type
function factory.docInternalS4Type(builder)
  return { --- @type doxygen.compound.docInternalS4Type
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docInternalS5Type
function factory.docInternalS5Type(builder)
  return { --- @type doxygen.compound.docInternalS5Type
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docInternalS6Type
function factory.docInternalS6Type(builder)
  return { --- @type doxygen.compound.docInternalS6Type
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docTitleType
function factory.docTitleType(builder)
  return { --- @type doxygen.compound.docTitleType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSummaryType
function factory.docSummaryType(builder)
  return { --- @type doxygen.compound.docSummaryType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docParaType
function factory.docParaType(builder)
  return { --- @type doxygen.compound.docParaType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docMarkupType
function factory.docMarkupType(builder)
  return { --- @type doxygen.compound.docMarkupType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docURLLink
function factory.docURLLink(builder)
  return { --- @type doxygen.compound.docURLLink
    content = builder:from_element_mixed(),
    ["url"] = builder:from_attr("url", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docAnchorType
function factory.docAnchorType(builder)
  return { --- @type doxygen.compound.docAnchorType
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docFormulaType
function factory.docFormulaType(builder)
  return { --- @type doxygen.compound.docFormulaType
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docIndexEntryType
function factory.docIndexEntryType(builder)
  return { --- @type doxygen.compound.docIndexEntryType
    ["primaryie"] = builder:from_element("primaryie", "required", factory.string),
    ["secondaryie"] = builder:from_element("secondaryie", "required", factory.string),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docListType
function factory.docListType(builder)
  return { --- @type doxygen.compound.docListType
    ["listitem"] = builder:from_element("listitem", "array", factory.docListItemType),
    ["type"] = builder:from_attr("type", "optional", "string"),
    ["start"] = builder:from_attr("start", "optional", "number"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docListItemType
function factory.docListItemType(builder)
  return { --- @type doxygen.compound.docListItemType
    ["para"] = builder:from_element("para", "array", factory.docParaType),
    ["override"] = builder:from_attr("override", "optional", "string"),
    ["value"] = builder:from_attr("value", "optional", "number"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docSimpleSectType
function factory.docSimpleSectType(builder)
  return { --- @type doxygen.compound.docSimpleSectType
    ["title"] = builder:from_element("title", "optional", factory.docTitleType),
    ["para"] = builder:from_element("para", "array", factory.docParaType),
    ["kind"] = builder:from_attr("kind", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docVarListEntryType
function factory.docVarListEntryType(builder)
  return { --- @type doxygen.compound.docVarListEntryType
    ["term"] = builder:from_element("term", "required", factory.docTitleType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docVariableListType
function factory.docVariableListType(builder)
  return { --- @type doxygen.compound.docVariableListType
    ["group"] = builder:from_group(factory.docVariableListGroup),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docRefTextType
function factory.docRefTextType(builder)
  return { --- @type doxygen.compound.docRefTextType
    content = builder:from_element_mixed(),
    ["refid"] = builder:from_attr("refid", "optional", "string"),
    ["kindref"] = builder:from_attr("kindref", "optional", "string"),
    ["external"] = builder:from_attr("external", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docTableType
function factory.docTableType(builder)
  return { --- @type doxygen.compound.docTableType
    ["caption"] = builder:from_element("caption", "optional", factory.docCaptionType),
    ["row"] = builder:from_element("row", "array", factory.docRowType),
    ["rows"] = builder:from_attr("rows", "optional", "number"),
    ["cols"] = builder:from_attr("cols", "optional", "number"),
    ["width"] = builder:from_attr("width", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docRowType
function factory.docRowType(builder)
  return { --- @type doxygen.compound.docRowType
    ["entry"] = builder:from_element("entry", "array", factory.docEntryType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docEntryType
function factory.docEntryType(builder)
  return { --- @type doxygen.compound.docEntryType
    ["para"] = builder:from_element("para", "array", factory.docParaType),
    ["thead"] = builder:from_attr("thead", "optional", "boolean"),
    ["colspan"] = builder:from_attr("colspan", "optional", "number"),
    ["rowspan"] = builder:from_attr("rowspan", "optional", "number"),
    ["align"] = builder:from_attr("align", "optional", "string"),
    ["valign"] = builder:from_attr("valign", "optional", "string"),
    ["width"] = builder:from_attr("width", "optional", "string"),
    ["class"] = builder:from_attr("class", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docCaptionType
function factory.docCaptionType(builder)
  return { --- @type doxygen.compound.docCaptionType
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docHeadingType
function factory.docHeadingType(builder)
  return { --- @type doxygen.compound.docHeadingType
    content = builder:from_element_mixed(),
    ["level"] = builder:from_attr("level", "optional", "number"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docImageType
function factory.docImageType(builder)
  return { --- @type doxygen.compound.docImageType
    content = builder:from_element_mixed(),
    ["type"] = builder:from_attr("type", "optional", "string"),
    ["name"] = builder:from_attr("name", "optional", "string"),
    ["width"] = builder:from_attr("width", "optional", "string"),
    ["height"] = builder:from_attr("height", "optional", "string"),
    ["alt"] = builder:from_attr("alt", "optional", "string"),
    ["inline"] = builder:from_attr("inline", "optional", "boolean"),
    ["caption"] = builder:from_attr("caption", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docDotMscType
function factory.docDotMscType(builder)
  return { --- @type doxygen.compound.docDotMscType
    content = builder:from_element_mixed(),
    ["name"] = builder:from_attr("name", "optional", "string"),
    ["width"] = builder:from_attr("width", "optional", "string"),
    ["height"] = builder:from_attr("height", "optional", "string"),
    ["caption"] = builder:from_attr("caption", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docImageFileType
function factory.docImageFileType(builder)
  return { --- @type doxygen.compound.docImageFileType
    content = builder:from_element_mixed(),
    ["name"] = builder:from_attr("name", "optional", "string"),
    ["width"] = builder:from_attr("width", "optional", "string"),
    ["height"] = builder:from_attr("height", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docPlantumlType
function factory.docPlantumlType(builder)
  return { --- @type doxygen.compound.docPlantumlType
    content = builder:from_element_mixed(),
    ["name"] = builder:from_attr("name", "optional", "string"),
    ["width"] = builder:from_attr("width", "optional", "string"),
    ["height"] = builder:from_attr("height", "optional", "string"),
    ["caption"] = builder:from_attr("caption", "optional", "string"),
    ["engine"] = builder:from_attr("engine", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docTocItemType
function factory.docTocItemType(builder)
  return { --- @type doxygen.compound.docTocItemType
    content = builder:from_element_mixed(),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docTocListType
function factory.docTocListType(builder)
  return { --- @type doxygen.compound.docTocListType
    ["tocitem"] = builder:from_element("tocitem", "array", factory.docTocItemType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docLanguageType
function factory.docLanguageType(builder)
  return { --- @type doxygen.compound.docLanguageType
    ["para"] = builder:from_element("para", "array", factory.docParaType),
    ["langid"] = builder:from_attr("langid", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docParamListType
function factory.docParamListType(builder)
  return { --- @type doxygen.compound.docParamListType
    ["parameteritem"] = builder:from_element("parameteritem", "array", factory.docParamListItem),
    ["kind"] = builder:from_attr("kind", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docParamListItem
function factory.docParamListItem(builder)
  return { --- @type doxygen.compound.docParamListItem
    ["parameternamelist"] = builder:from_element("parameternamelist", "array", factory.docParamNameList),
    ["parameterdescription"] = builder:from_element("parameterdescription", "required", factory.descriptionType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docParamNameList
function factory.docParamNameList(builder)
  return { --- @type doxygen.compound.docParamNameList
    ["parametertype"] = builder:from_element("parametertype", "array", factory.docParamType),
    ["parametername"] = builder:from_element("parametername", "array", factory.docParamName),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docParamType
function factory.docParamType(builder)
  return { --- @type doxygen.compound.docParamType
    content = builder:from_element_mixed(),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docParamName
function factory.docParamName(builder)
  return { --- @type doxygen.compound.docParamName
    content = builder:from_element_mixed(),
    ["direction"] = builder:from_attr("direction", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docXRefSectType
function factory.docXRefSectType(builder)
  return { --- @type doxygen.compound.docXRefSectType
    ["xreftitle"] = builder:from_element("xreftitle", "array", factory.string),
    ["xrefdescription"] = builder:from_element("xrefdescription", "required", factory.descriptionType),
    ["id"] = builder:from_attr("id", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docCopyType
function factory.docCopyType(builder)
  return { --- @type doxygen.compound.docCopyType
    ["para"] = builder:from_element("para", "array", factory.docParaType),
    ["sect1"] = builder:from_element("sect1", "array", factory.docSect1Type),
    ["internal"] = builder:from_element("internal", "optional", factory.docInternalType),
    ["link"] = builder:from_attr("link", "optional", "string"),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docDetailsType
function factory.docDetailsType(builder)
  return { --- @type doxygen.compound.docDetailsType
    ["summary"] = builder:from_element("summary", "optional", factory.docSummaryType),
    ["para"] = builder:from_element("para", "array", factory.docParaType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docBlockQuoteType
function factory.docBlockQuoteType(builder)
  return { --- @type doxygen.compound.docBlockQuoteType
    ["para"] = builder:from_element("para", "array", factory.docParaType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docParBlockType
function factory.docParBlockType(builder)
  return { --- @type doxygen.compound.docParBlockType
    ["para"] = builder:from_element("para", "array", factory.docParaType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docEmptyType
function factory.docEmptyType(builder)
  return { --- @type doxygen.compound.docEmptyType
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.tableofcontentsType
function factory.tableofcontentsType(builder)
  return { --- @type doxygen.compound.tableofcontentsType
    ["tocsect"] = builder:from_element("tocsect", "array", factory.tableofcontentsKindType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.tableofcontentsKindType
function factory.tableofcontentsKindType(builder)
  return { --- @type doxygen.compound.tableofcontentsKindType
    ["name"] = builder:from_element("name", "required", factory.string),
    ["reference"] = builder:from_element("reference", "required", factory.string),
    ["tableofcontents"] = builder:from_element("tableofcontents", "array", factory.tableofcontentsType),
  }
end

--- @param builder eeeBuilder
--- @return doxygen.compound.docEmojiType
function factory.docEmojiType(builder)
  return { --- @type doxygen.compound.docEmojiType
    ["name"] = builder:from_attr("name", "optional", "string"),
    ["unicode"] = builder:from_attr("unicode", "optional", "string"),
  }
end

--------------------------------
-- Groups
--------------------------------
--- @param builder eeeBuilder
--- @return doxygen.compound.docTitleCmdGroup
function factory.docTitleCmdGroup(builder)
  return { --- @type doxygen.compound.docTitleCmdGroup
    ["choice"] = builder:choice({
      { name = "ulink", factory = factory.docURLLink, occurence = "required" },
      { name = "bold", factory = factory.docMarkupType, occurence = "required" },
      { name = "s", factory = factory.docMarkupType, occurence = "required" },
      { name = "strike", factory = factory.docMarkupType, occurence = "required" },
      { name = "underline", factory = factory.docMarkupType, occurence = "required" },
      { name = "emphasis", factory = factory.docMarkupType, occurence = "required" },
      { name = "computeroutput", factory = factory.docMarkupType, occurence = "required" },
      { name = "subscript", factory = factory.docMarkupType, occurence = "required" },
      { name = "superscript", factory = factory.docMarkupType, occurence = "required" },
      { name = "center", factory = factory.docMarkupType, occurence = "required" },
      { name = "small", factory = factory.docMarkupType, occurence = "required" },
      { name = "cite", factory = factory.docMarkupType, occurence = "required" },
      { name = "del", factory = factory.docMarkupType, occurence = "required" },
      { name = "ins", factory = factory.docMarkupType, occurence = "required" },
      { name = "htmlonly", factory = factory.docHtmlOnlyType, occurence = "required" },
      { name = "manonly", factory = factory.string, occurence = "required" },
      { name = "xmlonly", factory = factory.string, occurence = "required" },
      { name = "rtfonly", factory = factory.string, occurence = "required" },
      { name = "latexonly", factory = factory.string, occurence = "required" },
      { name = "docbookonly", factory = factory.string, occurence = "required" },
      { name = "image", factory = factory.docImageType, occurence = "required" },
      { name = "dot", factory = factory.docDotMscType, occurence = "required" },
      { name = "msc", factory = factory.docDotMscType, occurence = "required" },
      { name = "plantuml", factory = factory.docPlantumlType, occurence = "required" },
      { name = "anchor", factory = factory.docAnchorType, occurence = "required" },
      { name = "formula", factory = factory.docFormulaType, occurence = "required" },
      { name = "ref", factory = factory.docRefTextType, occurence = "required" },
      { name = "emoji", factory = factory.docEmojiType, occurence = "required" },
      { name = "linebreak", factory = factory.docEmptyType, occurence = "required" },
      { name = "nonbreakablespace", factory = factory.docEmptyType, occurence = "required" },
      { name = "iexcl", factory = factory.docEmptyType, occurence = "required" },
      { name = "cent", factory = factory.docEmptyType, occurence = "required" },
      { name = "pound", factory = factory.docEmptyType, occurence = "required" },
      { name = "curren", factory = factory.docEmptyType, occurence = "required" },
      { name = "yen", factory = factory.docEmptyType, occurence = "required" },
      { name = "brvbar", factory = factory.docEmptyType, occurence = "required" },
      { name = "sect", factory = factory.docEmptyType, occurence = "required" },
      { name = "umlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "copy", factory = factory.docEmptyType, occurence = "required" },
      { name = "ordf", factory = factory.docEmptyType, occurence = "required" },
      { name = "laquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "not", factory = factory.docEmptyType, occurence = "required" },
      { name = "shy", factory = factory.docEmptyType, occurence = "required" },
      { name = "registered", factory = factory.docEmptyType, occurence = "required" },
      { name = "macr", factory = factory.docEmptyType, occurence = "required" },
      { name = "deg", factory = factory.docEmptyType, occurence = "required" },
      { name = "plusmn", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup2", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup3", factory = factory.docEmptyType, occurence = "required" },
      { name = "acute", factory = factory.docEmptyType, occurence = "required" },
      { name = "micro", factory = factory.docEmptyType, occurence = "required" },
      { name = "para", factory = factory.docEmptyType, occurence = "required" },
      { name = "middot", factory = factory.docEmptyType, occurence = "required" },
      { name = "cedil", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup1", factory = factory.docEmptyType, occurence = "required" },
      { name = "ordm", factory = factory.docEmptyType, occurence = "required" },
      { name = "raquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "frac14", factory = factory.docEmptyType, occurence = "required" },
      { name = "frac12", factory = factory.docEmptyType, occurence = "required" },
      { name = "frac34", factory = factory.docEmptyType, occurence = "required" },
      { name = "iquest", factory = factory.docEmptyType, occurence = "required" },
      { name = "Agrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Aacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Acirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Atilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "Aumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "Aring", factory = factory.docEmptyType, occurence = "required" },
      { name = "AElig", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ccedil", factory = factory.docEmptyType, occurence = "required" },
      { name = "Egrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Eacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ecirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Eumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "Igrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Iacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Icirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Iumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "ETH", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ntilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ograve", factory = factory.docEmptyType, occurence = "required" },
      { name = "Oacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ocirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Otilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "Oumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "times", factory = factory.docEmptyType, occurence = "required" },
      { name = "Oslash", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ugrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Uacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ucirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Uumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "Yacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "THORN", factory = factory.docEmptyType, occurence = "required" },
      { name = "szlig", factory = factory.docEmptyType, occurence = "required" },
      { name = "agrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "aacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "acirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "atilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "aumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "aring", factory = factory.docEmptyType, occurence = "required" },
      { name = "aelig", factory = factory.docEmptyType, occurence = "required" },
      { name = "ccedil", factory = factory.docEmptyType, occurence = "required" },
      { name = "egrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "eacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "ecirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "eumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "igrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "iacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "icirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "iumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "eth", factory = factory.docEmptyType, occurence = "required" },
      { name = "ntilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "ograve", factory = factory.docEmptyType, occurence = "required" },
      { name = "oacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "ocirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "otilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "oumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "divide", factory = factory.docEmptyType, occurence = "required" },
      { name = "oslash", factory = factory.docEmptyType, occurence = "required" },
      { name = "ugrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "uacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "ucirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "uumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "yacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "thorn", factory = factory.docEmptyType, occurence = "required" },
      { name = "yumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "fnof", factory = factory.docEmptyType, occurence = "required" },
      { name = "Alpha", factory = factory.docEmptyType, occurence = "required" },
      { name = "Beta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Gamma", factory = factory.docEmptyType, occurence = "required" },
      { name = "Delta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Epsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "Zeta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Eta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Theta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Iota", factory = factory.docEmptyType, occurence = "required" },
      { name = "Kappa", factory = factory.docEmptyType, occurence = "required" },
      { name = "Lambda", factory = factory.docEmptyType, occurence = "required" },
      { name = "Mu", factory = factory.docEmptyType, occurence = "required" },
      { name = "Nu", factory = factory.docEmptyType, occurence = "required" },
      { name = "Xi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Omicron", factory = factory.docEmptyType, occurence = "required" },
      { name = "Pi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Rho", factory = factory.docEmptyType, occurence = "required" },
      { name = "Sigma", factory = factory.docEmptyType, occurence = "required" },
      { name = "Tau", factory = factory.docEmptyType, occurence = "required" },
      { name = "Upsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "Phi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Chi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Psi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Omega", factory = factory.docEmptyType, occurence = "required" },
      { name = "alpha", factory = factory.docEmptyType, occurence = "required" },
      { name = "beta", factory = factory.docEmptyType, occurence = "required" },
      { name = "gamma", factory = factory.docEmptyType, occurence = "required" },
      { name = "delta", factory = factory.docEmptyType, occurence = "required" },
      { name = "epsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "zeta", factory = factory.docEmptyType, occurence = "required" },
      { name = "eta", factory = factory.docEmptyType, occurence = "required" },
      { name = "theta", factory = factory.docEmptyType, occurence = "required" },
      { name = "iota", factory = factory.docEmptyType, occurence = "required" },
      { name = "kappa", factory = factory.docEmptyType, occurence = "required" },
      { name = "lambda", factory = factory.docEmptyType, occurence = "required" },
      { name = "mu", factory = factory.docEmptyType, occurence = "required" },
      { name = "nu", factory = factory.docEmptyType, occurence = "required" },
      { name = "xi", factory = factory.docEmptyType, occurence = "required" },
      { name = "omicron", factory = factory.docEmptyType, occurence = "required" },
      { name = "pi", factory = factory.docEmptyType, occurence = "required" },
      { name = "rho", factory = factory.docEmptyType, occurence = "required" },
      { name = "sigmaf", factory = factory.docEmptyType, occurence = "required" },
      { name = "sigma", factory = factory.docEmptyType, occurence = "required" },
      { name = "tau", factory = factory.docEmptyType, occurence = "required" },
      { name = "upsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "phi", factory = factory.docEmptyType, occurence = "required" },
      { name = "chi", factory = factory.docEmptyType, occurence = "required" },
      { name = "psi", factory = factory.docEmptyType, occurence = "required" },
      { name = "omega", factory = factory.docEmptyType, occurence = "required" },
      { name = "thetasym", factory = factory.docEmptyType, occurence = "required" },
      { name = "upsih", factory = factory.docEmptyType, occurence = "required" },
      { name = "piv", factory = factory.docEmptyType, occurence = "required" },
      { name = "bull", factory = factory.docEmptyType, occurence = "required" },
      { name = "hellip", factory = factory.docEmptyType, occurence = "required" },
      { name = "prime", factory = factory.docEmptyType, occurence = "required" },
      { name = "Prime", factory = factory.docEmptyType, occurence = "required" },
      { name = "oline", factory = factory.docEmptyType, occurence = "required" },
      { name = "frasl", factory = factory.docEmptyType, occurence = "required" },
      { name = "weierp", factory = factory.docEmptyType, occurence = "required" },
      { name = "imaginary", factory = factory.docEmptyType, occurence = "required" },
      { name = "real", factory = factory.docEmptyType, occurence = "required" },
      { name = "trademark", factory = factory.docEmptyType, occurence = "required" },
      { name = "alefsym", factory = factory.docEmptyType, occurence = "required" },
      { name = "larr", factory = factory.docEmptyType, occurence = "required" },
      { name = "uarr", factory = factory.docEmptyType, occurence = "required" },
      { name = "rarr", factory = factory.docEmptyType, occurence = "required" },
      { name = "darr", factory = factory.docEmptyType, occurence = "required" },
      { name = "harr", factory = factory.docEmptyType, occurence = "required" },
      { name = "crarr", factory = factory.docEmptyType, occurence = "required" },
      { name = "lArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "uArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "rArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "dArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "hArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "forall", factory = factory.docEmptyType, occurence = "required" },
      { name = "part", factory = factory.docEmptyType, occurence = "required" },
      { name = "exist", factory = factory.docEmptyType, occurence = "required" },
      { name = "empty", factory = factory.docEmptyType, occurence = "required" },
      { name = "nabla", factory = factory.docEmptyType, occurence = "required" },
      { name = "isin", factory = factory.docEmptyType, occurence = "required" },
      { name = "notin", factory = factory.docEmptyType, occurence = "required" },
      { name = "ni", factory = factory.docEmptyType, occurence = "required" },
      { name = "prod", factory = factory.docEmptyType, occurence = "required" },
      { name = "sum", factory = factory.docEmptyType, occurence = "required" },
      { name = "minus", factory = factory.docEmptyType, occurence = "required" },
      { name = "lowast", factory = factory.docEmptyType, occurence = "required" },
      { name = "radic", factory = factory.docEmptyType, occurence = "required" },
      { name = "prop", factory = factory.docEmptyType, occurence = "required" },
      { name = "infin", factory = factory.docEmptyType, occurence = "required" },
      { name = "ang", factory = factory.docEmptyType, occurence = "required" },
      { name = "and", factory = factory.docEmptyType, occurence = "required" },
      { name = "or", factory = factory.docEmptyType, occurence = "required" },
      { name = "cap", factory = factory.docEmptyType, occurence = "required" },
      { name = "cup", factory = factory.docEmptyType, occurence = "required" },
      { name = "int", factory = factory.docEmptyType, occurence = "required" },
      { name = "there4", factory = factory.docEmptyType, occurence = "required" },
      { name = "sim", factory = factory.docEmptyType, occurence = "required" },
      { name = "cong", factory = factory.docEmptyType, occurence = "required" },
      { name = "asymp", factory = factory.docEmptyType, occurence = "required" },
      { name = "ne", factory = factory.docEmptyType, occurence = "required" },
      { name = "equiv", factory = factory.docEmptyType, occurence = "required" },
      { name = "le", factory = factory.docEmptyType, occurence = "required" },
      { name = "ge", factory = factory.docEmptyType, occurence = "required" },
      { name = "sub", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup", factory = factory.docEmptyType, occurence = "required" },
      { name = "nsub", factory = factory.docEmptyType, occurence = "required" },
      { name = "sube", factory = factory.docEmptyType, occurence = "required" },
      { name = "supe", factory = factory.docEmptyType, occurence = "required" },
      { name = "oplus", factory = factory.docEmptyType, occurence = "required" },
      { name = "otimes", factory = factory.docEmptyType, occurence = "required" },
      { name = "perp", factory = factory.docEmptyType, occurence = "required" },
      { name = "sdot", factory = factory.docEmptyType, occurence = "required" },
      { name = "lceil", factory = factory.docEmptyType, occurence = "required" },
      { name = "rceil", factory = factory.docEmptyType, occurence = "required" },
      { name = "lfloor", factory = factory.docEmptyType, occurence = "required" },
      { name = "rfloor", factory = factory.docEmptyType, occurence = "required" },
      { name = "lang", factory = factory.docEmptyType, occurence = "required" },
      { name = "rang", factory = factory.docEmptyType, occurence = "required" },
      { name = "loz", factory = factory.docEmptyType, occurence = "required" },
      { name = "spades", factory = factory.docEmptyType, occurence = "required" },
      { name = "clubs", factory = factory.docEmptyType, occurence = "required" },
      { name = "hearts", factory = factory.docEmptyType, occurence = "required" },
      { name = "diams", factory = factory.docEmptyType, occurence = "required" },
      { name = "OElig", factory = factory.docEmptyType, occurence = "required" },
      { name = "oelig", factory = factory.docEmptyType, occurence = "required" },
      { name = "Scaron", factory = factory.docEmptyType, occurence = "required" },
      { name = "scaron", factory = factory.docEmptyType, occurence = "required" },
      { name = "Yumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "circ", factory = factory.docEmptyType, occurence = "required" },
      { name = "tilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "ensp", factory = factory.docEmptyType, occurence = "required" },
      { name = "emsp", factory = factory.docEmptyType, occurence = "required" },
      { name = "thinsp", factory = factory.docEmptyType, occurence = "required" },
      { name = "zwnj", factory = factory.docEmptyType, occurence = "required" },
      { name = "zwj", factory = factory.docEmptyType, occurence = "required" },
      { name = "lrm", factory = factory.docEmptyType, occurence = "required" },
      { name = "rlm", factory = factory.docEmptyType, occurence = "required" },
      { name = "ndash", factory = factory.docEmptyType, occurence = "required" },
      { name = "mdash", factory = factory.docEmptyType, occurence = "required" },
      { name = "lsquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "rsquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "sbquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "ldquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "rdquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "bdquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "dagger", factory = factory.docEmptyType, occurence = "required" },
      { name = "Dagger", factory = factory.docEmptyType, occurence = "required" },
      { name = "permil", factory = factory.docEmptyType, occurence = "required" },
      { name = "lsaquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "rsaquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "euro", factory = factory.docEmptyType, occurence = "required" },
      { name = "tm", factory = factory.docEmptyType, occurence = "required" },
    }),
  }
end
--- @param builder eeeBuilder
--- @return doxygen.compound.docCmdGroup
function factory.docCmdGroup(builder)
  return { --- @type doxygen.compound.docCmdGroup
    ["choice"] = builder:choice({
      { name = "ulink", factory = factory.docURLLink, occurence = "required" },
      { name = "bold", factory = factory.docMarkupType, occurence = "required" },
      { name = "s", factory = factory.docMarkupType, occurence = "required" },
      { name = "strike", factory = factory.docMarkupType, occurence = "required" },
      { name = "underline", factory = factory.docMarkupType, occurence = "required" },
      { name = "emphasis", factory = factory.docMarkupType, occurence = "required" },
      { name = "computeroutput", factory = factory.docMarkupType, occurence = "required" },
      { name = "subscript", factory = factory.docMarkupType, occurence = "required" },
      { name = "superscript", factory = factory.docMarkupType, occurence = "required" },
      { name = "center", factory = factory.docMarkupType, occurence = "required" },
      { name = "small", factory = factory.docMarkupType, occurence = "required" },
      { name = "cite", factory = factory.docMarkupType, occurence = "required" },
      { name = "del", factory = factory.docMarkupType, occurence = "required" },
      { name = "ins", factory = factory.docMarkupType, occurence = "required" },
      { name = "htmlonly", factory = factory.docHtmlOnlyType, occurence = "required" },
      { name = "manonly", factory = factory.string, occurence = "required" },
      { name = "xmlonly", factory = factory.string, occurence = "required" },
      { name = "rtfonly", factory = factory.string, occurence = "required" },
      { name = "latexonly", factory = factory.string, occurence = "required" },
      { name = "docbookonly", factory = factory.string, occurence = "required" },
      { name = "image", factory = factory.docImageType, occurence = "required" },
      { name = "dot", factory = factory.docDotMscType, occurence = "required" },
      { name = "msc", factory = factory.docDotMscType, occurence = "required" },
      { name = "plantuml", factory = factory.docPlantumlType, occurence = "required" },
      { name = "anchor", factory = factory.docAnchorType, occurence = "required" },
      { name = "formula", factory = factory.docFormulaType, occurence = "required" },
      { name = "ref", factory = factory.docRefTextType, occurence = "required" },
      { name = "emoji", factory = factory.docEmojiType, occurence = "required" },
      { name = "linebreak", factory = factory.docEmptyType, occurence = "required" },
      { name = "nonbreakablespace", factory = factory.docEmptyType, occurence = "required" },
      { name = "iexcl", factory = factory.docEmptyType, occurence = "required" },
      { name = "cent", factory = factory.docEmptyType, occurence = "required" },
      { name = "pound", factory = factory.docEmptyType, occurence = "required" },
      { name = "curren", factory = factory.docEmptyType, occurence = "required" },
      { name = "yen", factory = factory.docEmptyType, occurence = "required" },
      { name = "brvbar", factory = factory.docEmptyType, occurence = "required" },
      { name = "sect", factory = factory.docEmptyType, occurence = "required" },
      { name = "umlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "copy", factory = factory.docEmptyType, occurence = "required" },
      { name = "ordf", factory = factory.docEmptyType, occurence = "required" },
      { name = "laquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "not", factory = factory.docEmptyType, occurence = "required" },
      { name = "shy", factory = factory.docEmptyType, occurence = "required" },
      { name = "registered", factory = factory.docEmptyType, occurence = "required" },
      { name = "macr", factory = factory.docEmptyType, occurence = "required" },
      { name = "deg", factory = factory.docEmptyType, occurence = "required" },
      { name = "plusmn", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup2", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup3", factory = factory.docEmptyType, occurence = "required" },
      { name = "acute", factory = factory.docEmptyType, occurence = "required" },
      { name = "micro", factory = factory.docEmptyType, occurence = "required" },
      { name = "para", factory = factory.docEmptyType, occurence = "required" },
      { name = "middot", factory = factory.docEmptyType, occurence = "required" },
      { name = "cedil", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup1", factory = factory.docEmptyType, occurence = "required" },
      { name = "ordm", factory = factory.docEmptyType, occurence = "required" },
      { name = "raquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "frac14", factory = factory.docEmptyType, occurence = "required" },
      { name = "frac12", factory = factory.docEmptyType, occurence = "required" },
      { name = "frac34", factory = factory.docEmptyType, occurence = "required" },
      { name = "iquest", factory = factory.docEmptyType, occurence = "required" },
      { name = "Agrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Aacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Acirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Atilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "Aumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "Aring", factory = factory.docEmptyType, occurence = "required" },
      { name = "AElig", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ccedil", factory = factory.docEmptyType, occurence = "required" },
      { name = "Egrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Eacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ecirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Eumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "Igrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Iacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Icirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Iumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "ETH", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ntilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ograve", factory = factory.docEmptyType, occurence = "required" },
      { name = "Oacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ocirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Otilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "Oumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "times", factory = factory.docEmptyType, occurence = "required" },
      { name = "Oslash", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ugrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "Uacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "Ucirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "Uumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "Yacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "THORN", factory = factory.docEmptyType, occurence = "required" },
      { name = "szlig", factory = factory.docEmptyType, occurence = "required" },
      { name = "agrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "aacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "acirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "atilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "aumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "aring", factory = factory.docEmptyType, occurence = "required" },
      { name = "aelig", factory = factory.docEmptyType, occurence = "required" },
      { name = "ccedil", factory = factory.docEmptyType, occurence = "required" },
      { name = "egrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "eacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "ecirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "eumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "igrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "iacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "icirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "iumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "eth", factory = factory.docEmptyType, occurence = "required" },
      { name = "ntilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "ograve", factory = factory.docEmptyType, occurence = "required" },
      { name = "oacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "ocirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "otilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "oumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "divide", factory = factory.docEmptyType, occurence = "required" },
      { name = "oslash", factory = factory.docEmptyType, occurence = "required" },
      { name = "ugrave", factory = factory.docEmptyType, occurence = "required" },
      { name = "uacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "ucirc", factory = factory.docEmptyType, occurence = "required" },
      { name = "uumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "yacute", factory = factory.docEmptyType, occurence = "required" },
      { name = "thorn", factory = factory.docEmptyType, occurence = "required" },
      { name = "yumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "fnof", factory = factory.docEmptyType, occurence = "required" },
      { name = "Alpha", factory = factory.docEmptyType, occurence = "required" },
      { name = "Beta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Gamma", factory = factory.docEmptyType, occurence = "required" },
      { name = "Delta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Epsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "Zeta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Eta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Theta", factory = factory.docEmptyType, occurence = "required" },
      { name = "Iota", factory = factory.docEmptyType, occurence = "required" },
      { name = "Kappa", factory = factory.docEmptyType, occurence = "required" },
      { name = "Lambda", factory = factory.docEmptyType, occurence = "required" },
      { name = "Mu", factory = factory.docEmptyType, occurence = "required" },
      { name = "Nu", factory = factory.docEmptyType, occurence = "required" },
      { name = "Xi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Omicron", factory = factory.docEmptyType, occurence = "required" },
      { name = "Pi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Rho", factory = factory.docEmptyType, occurence = "required" },
      { name = "Sigma", factory = factory.docEmptyType, occurence = "required" },
      { name = "Tau", factory = factory.docEmptyType, occurence = "required" },
      { name = "Upsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "Phi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Chi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Psi", factory = factory.docEmptyType, occurence = "required" },
      { name = "Omega", factory = factory.docEmptyType, occurence = "required" },
      { name = "alpha", factory = factory.docEmptyType, occurence = "required" },
      { name = "beta", factory = factory.docEmptyType, occurence = "required" },
      { name = "gamma", factory = factory.docEmptyType, occurence = "required" },
      { name = "delta", factory = factory.docEmptyType, occurence = "required" },
      { name = "epsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "zeta", factory = factory.docEmptyType, occurence = "required" },
      { name = "eta", factory = factory.docEmptyType, occurence = "required" },
      { name = "theta", factory = factory.docEmptyType, occurence = "required" },
      { name = "iota", factory = factory.docEmptyType, occurence = "required" },
      { name = "kappa", factory = factory.docEmptyType, occurence = "required" },
      { name = "lambda", factory = factory.docEmptyType, occurence = "required" },
      { name = "mu", factory = factory.docEmptyType, occurence = "required" },
      { name = "nu", factory = factory.docEmptyType, occurence = "required" },
      { name = "xi", factory = factory.docEmptyType, occurence = "required" },
      { name = "omicron", factory = factory.docEmptyType, occurence = "required" },
      { name = "pi", factory = factory.docEmptyType, occurence = "required" },
      { name = "rho", factory = factory.docEmptyType, occurence = "required" },
      { name = "sigmaf", factory = factory.docEmptyType, occurence = "required" },
      { name = "sigma", factory = factory.docEmptyType, occurence = "required" },
      { name = "tau", factory = factory.docEmptyType, occurence = "required" },
      { name = "upsilon", factory = factory.docEmptyType, occurence = "required" },
      { name = "phi", factory = factory.docEmptyType, occurence = "required" },
      { name = "chi", factory = factory.docEmptyType, occurence = "required" },
      { name = "psi", factory = factory.docEmptyType, occurence = "required" },
      { name = "omega", factory = factory.docEmptyType, occurence = "required" },
      { name = "thetasym", factory = factory.docEmptyType, occurence = "required" },
      { name = "upsih", factory = factory.docEmptyType, occurence = "required" },
      { name = "piv", factory = factory.docEmptyType, occurence = "required" },
      { name = "bull", factory = factory.docEmptyType, occurence = "required" },
      { name = "hellip", factory = factory.docEmptyType, occurence = "required" },
      { name = "prime", factory = factory.docEmptyType, occurence = "required" },
      { name = "Prime", factory = factory.docEmptyType, occurence = "required" },
      { name = "oline", factory = factory.docEmptyType, occurence = "required" },
      { name = "frasl", factory = factory.docEmptyType, occurence = "required" },
      { name = "weierp", factory = factory.docEmptyType, occurence = "required" },
      { name = "imaginary", factory = factory.docEmptyType, occurence = "required" },
      { name = "real", factory = factory.docEmptyType, occurence = "required" },
      { name = "trademark", factory = factory.docEmptyType, occurence = "required" },
      { name = "alefsym", factory = factory.docEmptyType, occurence = "required" },
      { name = "larr", factory = factory.docEmptyType, occurence = "required" },
      { name = "uarr", factory = factory.docEmptyType, occurence = "required" },
      { name = "rarr", factory = factory.docEmptyType, occurence = "required" },
      { name = "darr", factory = factory.docEmptyType, occurence = "required" },
      { name = "harr", factory = factory.docEmptyType, occurence = "required" },
      { name = "crarr", factory = factory.docEmptyType, occurence = "required" },
      { name = "lArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "uArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "rArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "dArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "hArr", factory = factory.docEmptyType, occurence = "required" },
      { name = "forall", factory = factory.docEmptyType, occurence = "required" },
      { name = "part", factory = factory.docEmptyType, occurence = "required" },
      { name = "exist", factory = factory.docEmptyType, occurence = "required" },
      { name = "empty", factory = factory.docEmptyType, occurence = "required" },
      { name = "nabla", factory = factory.docEmptyType, occurence = "required" },
      { name = "isin", factory = factory.docEmptyType, occurence = "required" },
      { name = "notin", factory = factory.docEmptyType, occurence = "required" },
      { name = "ni", factory = factory.docEmptyType, occurence = "required" },
      { name = "prod", factory = factory.docEmptyType, occurence = "required" },
      { name = "sum", factory = factory.docEmptyType, occurence = "required" },
      { name = "minus", factory = factory.docEmptyType, occurence = "required" },
      { name = "lowast", factory = factory.docEmptyType, occurence = "required" },
      { name = "radic", factory = factory.docEmptyType, occurence = "required" },
      { name = "prop", factory = factory.docEmptyType, occurence = "required" },
      { name = "infin", factory = factory.docEmptyType, occurence = "required" },
      { name = "ang", factory = factory.docEmptyType, occurence = "required" },
      { name = "and", factory = factory.docEmptyType, occurence = "required" },
      { name = "or", factory = factory.docEmptyType, occurence = "required" },
      { name = "cap", factory = factory.docEmptyType, occurence = "required" },
      { name = "cup", factory = factory.docEmptyType, occurence = "required" },
      { name = "int", factory = factory.docEmptyType, occurence = "required" },
      { name = "there4", factory = factory.docEmptyType, occurence = "required" },
      { name = "sim", factory = factory.docEmptyType, occurence = "required" },
      { name = "cong", factory = factory.docEmptyType, occurence = "required" },
      { name = "asymp", factory = factory.docEmptyType, occurence = "required" },
      { name = "ne", factory = factory.docEmptyType, occurence = "required" },
      { name = "equiv", factory = factory.docEmptyType, occurence = "required" },
      { name = "le", factory = factory.docEmptyType, occurence = "required" },
      { name = "ge", factory = factory.docEmptyType, occurence = "required" },
      { name = "sub", factory = factory.docEmptyType, occurence = "required" },
      { name = "sup", factory = factory.docEmptyType, occurence = "required" },
      { name = "nsub", factory = factory.docEmptyType, occurence = "required" },
      { name = "sube", factory = factory.docEmptyType, occurence = "required" },
      { name = "supe", factory = factory.docEmptyType, occurence = "required" },
      { name = "oplus", factory = factory.docEmptyType, occurence = "required" },
      { name = "otimes", factory = factory.docEmptyType, occurence = "required" },
      { name = "perp", factory = factory.docEmptyType, occurence = "required" },
      { name = "sdot", factory = factory.docEmptyType, occurence = "required" },
      { name = "lceil", factory = factory.docEmptyType, occurence = "required" },
      { name = "rceil", factory = factory.docEmptyType, occurence = "required" },
      { name = "lfloor", factory = factory.docEmptyType, occurence = "required" },
      { name = "rfloor", factory = factory.docEmptyType, occurence = "required" },
      { name = "lang", factory = factory.docEmptyType, occurence = "required" },
      { name = "rang", factory = factory.docEmptyType, occurence = "required" },
      { name = "loz", factory = factory.docEmptyType, occurence = "required" },
      { name = "spades", factory = factory.docEmptyType, occurence = "required" },
      { name = "clubs", factory = factory.docEmptyType, occurence = "required" },
      { name = "hearts", factory = factory.docEmptyType, occurence = "required" },
      { name = "diams", factory = factory.docEmptyType, occurence = "required" },
      { name = "OElig", factory = factory.docEmptyType, occurence = "required" },
      { name = "oelig", factory = factory.docEmptyType, occurence = "required" },
      { name = "Scaron", factory = factory.docEmptyType, occurence = "required" },
      { name = "scaron", factory = factory.docEmptyType, occurence = "required" },
      { name = "Yumlaut", factory = factory.docEmptyType, occurence = "required" },
      { name = "circ", factory = factory.docEmptyType, occurence = "required" },
      { name = "tilde", factory = factory.docEmptyType, occurence = "required" },
      { name = "ensp", factory = factory.docEmptyType, occurence = "required" },
      { name = "emsp", factory = factory.docEmptyType, occurence = "required" },
      { name = "thinsp", factory = factory.docEmptyType, occurence = "required" },
      { name = "zwnj", factory = factory.docEmptyType, occurence = "required" },
      { name = "zwj", factory = factory.docEmptyType, occurence = "required" },
      { name = "lrm", factory = factory.docEmptyType, occurence = "required" },
      { name = "rlm", factory = factory.docEmptyType, occurence = "required" },
      { name = "ndash", factory = factory.docEmptyType, occurence = "required" },
      { name = "mdash", factory = factory.docEmptyType, occurence = "required" },
      { name = "lsquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "rsquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "sbquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "ldquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "rdquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "bdquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "dagger", factory = factory.docEmptyType, occurence = "required" },
      { name = "Dagger", factory = factory.docEmptyType, occurence = "required" },
      { name = "permil", factory = factory.docEmptyType, occurence = "required" },
      { name = "lsaquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "rsaquo", factory = factory.docEmptyType, occurence = "required" },
      { name = "euro", factory = factory.docEmptyType, occurence = "required" },
      { name = "tm", factory = factory.docEmptyType, occurence = "required" },
      { name = "hruler", factory = factory.docEmptyType, occurence = "required" },
      { name = "preformatted", factory = factory.docMarkupType, occurence = "required" },
      { name = "programlisting", factory = factory.listingType, occurence = "required" },
      { name = "verbatim", factory = factory.string, occurence = "required" },
      { name = "javadocliteral", factory = factory.string, occurence = "required" },
      { name = "javadoccode", factory = factory.string, occurence = "required" },
      { name = "indexentry", factory = factory.docIndexEntryType, occurence = "required" },
      { name = "orderedlist", factory = factory.docListType, occurence = "required" },
      { name = "itemizedlist", factory = factory.docListType, occurence = "required" },
      { name = "simplesect", factory = factory.docSimpleSectType, occurence = "required" },
      { name = "title", factory = factory.docTitleType, occurence = "required" },
      { name = "variablelist", factory = factory.docVariableListType, occurence = "required" },
      { name = "table", factory = factory.docTableType, occurence = "required" },
      { name = "heading", factory = factory.docHeadingType, occurence = "required" },
      { name = "dotfile", factory = factory.docImageFileType, occurence = "required" },
      { name = "mscfile", factory = factory.docImageFileType, occurence = "required" },
      { name = "diafile", factory = factory.docImageFileType, occurence = "required" },
      { name = "toclist", factory = factory.docTocListType, occurence = "required" },
      { name = "language", factory = factory.docLanguageType, occurence = "required" },
      { name = "parameterlist", factory = factory.docParamListType, occurence = "required" },
      { name = "xrefsect", factory = factory.docXRefSectType, occurence = "required" },
      { name = "copydoc", factory = factory.docCopyType, occurence = "required" },
      { name = "details", factory = factory.docDetailsType, occurence = "required" },
      { name = "blockquote", factory = factory.docBlockQuoteType, occurence = "required" },
      { name = "parblock", factory = factory.docParBlockType, occurence = "required" },
    }),
  }
end
--- @param builder eeeBuilder
--- @return doxygen.compound.docVariableListGroup
function factory.docVariableListGroup(builder)
  return { --- @type doxygen.compound.docVariableListGroup
    ["varlistentry"] = builder:from_element("varlistentry", "required", factory.docVarListEntryType),
    ["listitem"] = builder:from_element("listitem", "required", factory.docListItemType),
  }
end
return factory

